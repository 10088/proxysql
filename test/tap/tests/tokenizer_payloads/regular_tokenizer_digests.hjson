[
	// NOTE: KnownIssue - 10
	{
		"q": [
			// Comments: /* */
			"select /* COMMENT */ 1",
			"select/* COMMENT */ 1",
			"select/* COMMENT */1",
			"/* COMMENT */select 1",
			"/* COMMENT */ select 1 ",
			"select 1/* COMMENT */  ",
			"select 1 /* COMMENT */ ",
			// Comments: initial '#'
			"# random_comment \n   select 1.1",
			"#random_comment \nselect 1.1",
			"#random_comment\nselect 1.1",
			// Comments: initial '--'
			"-- random_comment \n select 1.1",
			"   --   random_comment\nselect 1.1",
			// Comments: final/initial '#|--'
			"# random_comment\n select 1.1 #final_comment\n   ",
			// NOTE: KnownIssue - 1
			"# random_comment\n select 1.1# final_comment   \n",
			"# random_comment\n select 1.1   #final_comment  \n  ",
			"-- random_comment\n select 1.1 -- final_comment\n   ",
			"-- random_comment\n select 1.1-- final_comment   \n",
			"-- random_comment\n select 1.1   -- final_comment  \n  "
		],
		"s1": "select ?",
		"s2": "select ?",
		"s3": "select ?",
		"s4": "select ?"
	},
	// Floats
	{
		"q": [
			"select 1.1",
			// Exponentials
			"select 99.1929",
			"select 1.1e9",
			"select 1.1e+9",
			"select 1.1e-9",
			// NOTE: KnownIssue - 2: Exponentials are case sensitive
			"select 1.1E9",
			"select 1.1E+9",
			"select 1.1E-9",
			// hexadecimal
			"select 0x100"
		],
		"s1": "select ?"
	},
	// Operators
	{
		"q":  "select 1 +1",
		"s1": "select ? +?",
		"s2": "select ?+?",
		"s3": "select ?+?",
		"s4": "select ?+?"
	},
	{
		"q":  "select 1+ 1",
		"s1": "select ?+ ?",
		"s2": "select ?+?",
		"s3": "select ?+?",
		"s4": "select ?+?"
	},
	{
		"q": "select 1- 1",
		"s1": "select ?- ?",
		"s2": "select ?-?",
		"s3": "select ?-?",
		"s4": "select ?-?"
	},
	{
		"q":  "select 1 -1",
		"s1": "select ? -?",
		"s2": "select ?-?",
		"s3": "select ?-?",
		"s4": "select ?-?"
	},
	{
		"q":  "select 1* 1",
		"s1": "select ?* ?",
		"s2": "select ?*?",
		"s3": "select ?*?",
		"s4": "select ?*?"
	},
	{
		"q":  "select 1 *1",
		"s1": "select ? *?",
		"s2": "select ?*?",
		"s3": "select ?*?",
		"s4": "select ?*?"
	},
	{
		"q":  "select 1/ 1",
		"s1": "select ?/ ?",
		"s2": "select ?/?",
		"s3": "select ?/?",
		"s4": "select ?/?"
	},
	{
		"q":  "select 1 /1",
		"s1": "select ? /?",
		"s2": "select ?/?",
		"s3": "select ?/?",
		"s4": "select ?/?"
	},
	{
		"q":  "select 1% 1",
		"s1": "select ?% ?",
		"s2": "select ?%?",
		"s3": "select ?%?",
		"s4": "select ?%?"
	},
	{
		"q":  "select 1 %1",
		"s1": "select ? %?",
		"s2": "select ?%?",
		"s3": "select ?%?",
		"s4": "select ?%?"
	},
	// operators and commas
	{
		"q":  "select 1+ 1, 1 -1, 1 * 1 , 1/1 , 100 % 3",
		"s1": "select ?+ ?, ? -?, ? * ? , ?/? , ? % ?",
		"s2": "select ?+?,?-?,?*?,?/?,?%?",
		"s3": "select ?+?,?-?,?*?,?/?,?%?",
		"s4": "select ?+?,?-?,?*?,?/?,?%?"
	},
	{
		"q":  "SELECT * FROM t t1, t t2 ,t t3,t t4 LIMIT 0",
		"s1": "SELECT * FROM t t1, t t2 ,t t3,t t4 LIMIT ?",
		"s2": "SELECT * FROM t t1,t t2,t t3,t t4 LIMIT ?",
		"s3": "SELECT * FROM t t1,t t2,t t3,t t4 LIMIT ?",
		"s4": "SELECT * FROM t t1,t t2,t t3,t t4 LIMIT ?"
	},
	// mixing operators, commas and literals
	{
		"q":  "select 1+ 1,'1 -1', 1 * 1 , '1/1 ',100 % 3",
		"s1": "select ?+ ?,?, ? * ? , ?,? % ?",
		"s2": "select ?+?,?,?*?,?,?%?",
		"s3": "select ?+?,?,?*?,?,?%?",
		"s4": "select ?+?,?,?*?,?,?%?"
	},
	{
		"q":  "select 1+ 1    ,'1 -1' ,1 * 1 , '1 '  , 100 % 3",
		"s1": "select ?+ ? ,? ,? * ? , ? , ? % ?",
		"s2": "select ?+?,?,?*?,?,?%?",
		"s3": "select ?+?,?,?*?,?,?%?",
		"s4": "select ?+?,?,?*?,?,?%?"
	},
	{
		"q":  "select   1 + 1    , '1 - 1' , 1 * 1 , '1 '  , 100 % 3      ",
		"s1": "select ? + ? , ? , ? * ? , ? , ? % ?",
		"s2": "select ?+?,?,?*?,?,?%?",
		"s3": "select ?+?,?,?*?,?,?%?",
		"s4": "select ?+?,?,?*?,?,?%?"
	},
	// NOTE: KnownIssue - 8: Operators not removed when extra space precedes the value
	{
		"q":  "select  + 1",
		"s1": "select + ?",
		"s2": "select ?",
		"s3": "select ?",
		"s4": "select ?"
	},
	// strings - simple
	{
		"q":  "select * from t where t = \"foo\"",
		"s1": "select * from t where t = ?",
		"s2": "select * from t where t = ?",
		"s3": "select * from t where t = ?",
		"s4": "select * from t where t = ?"
	},
	{
		"q":  "select \"1+ 1, 1 -1, 1 * 1 , 1/1 , 100 % 3\"",
		"s1": "select ?",
		"s2": "select ?",
		"s3": "select ?",
		"s4": "select ?"
	},
	{
		"q":  "SELECT N'string', _utf8'str\\'i\nng'",
		"s1":  "SELECT N?, _utf8?i ng",
		"s2":  "SELECT N?,_utf8?i ng",
		"s3":  "SELECT N?,_utf8?i ng",
		"s4":  "SELECT N?,_utf8?i ng"
	},
	{
		"q": "create table test.1_null_digests (null_c1 TEXT, c2 TEXT, c3 TEXT)",
		"s1": "create table test.1_null_digests (null_c1 TEXT, c2 TEXT, c3 TEXT)",
		"s2": "create table test.1_null_digests (null_c1 TEXT,c2 TEXT,c3 TEXT)",
		"s3": "create table test.1_null_digests (null_c1 TEXT,c2 TEXT,c3 TEXT)",
		"s4": "create table test.1_null_digests (null_c1 TEXT,c2 TEXT,c3 TEXT)",
		"dr": "create table test.?_null_digests (null_c? TEXT,c? TEXT,c? TEXT)"
	},
	{
		"q": "select * from 1_value",
		"s1": "select * from 1_value",
		"s2": "select * from 1_value",
		"s3": "select * from 1_value",
		"s4": "select * from 1_value",
		"dr": "select * from ?_value"
	},
	// string - preceded by signs - outside parenthesis, not preceded by commas
	{
		"q":  "select -\"1\"",
		"s1": "select -?",
		"s2": "select ?",
		"s3": "select ?",
		"s4": "select ?"
	},
	{
		"q":  "select +\"1\",'foo'",
		"s1": "select +?,?",
		"s2": "select ?,?",
		"s3": "select ?,?",
		"s4": "select ?,?"
	},
	// string - preceded by signs - inside parenthesis, or preceded by commas
	{
		"q":  "select (-'89')",
		"s1": "select (-?)",
		"s2": "select (?)",
		"s3": "select (?)",
		"s4": "select (?)"
	},
	{
		"q":  "select 10,-'89'",
		"s1": "select ?,-?",
		"s2": "select ?,?",
		"s3": "select ?,?",
		"s4": "select ?,?"
	},
	{
		"q":  "select  10, -'89' ",
		"s1": "select ?, -?",
		"s2": "select ?,?",
		"s3": "select ?,?",
		"s4": "select ?,?"
	},
	{
		"q":  "select  '10', -'89' ",
		"s1": "select ?, -?",
		"s2": "select ?,?",
		"s3": "select ?,?",
		"s4": "select ?,?"
	},
	{
		"q":  "select  10, -'89 ',+'5'",
		"s1": "select ?, -?,+?",
		"s2": "select ?,?,?",
		"s3": "select ?,?,?",
		"s4": "select ?,?,?"
	},
	// NOTE: KnownIssue - 7: Spaces not removed after parenthesis when literal strings are preceded by '+|-'
	{
		"q":  "select CONCAT( -'89'+'10')",
		"s1": "select CONCAT( -?+?)",
		//             ^ preserved space
		"s2": "select CONCAT(?+?)",
		"s3": "select CONCAT(?+?)",
		"s4": "select CONCAT(?+?)"
	},
	{
		"q":  "select CONCAT( -'89'+'10')",
		"s1": "select CONCAT( -?+?)",
		"s2": "select CONCAT(?+?)",
		"s3": "select CONCAT(?+?)",
		"s4": "select CONCAT(?+?)"
	},
	{
		"q":  "select CONCAT(  -'89'   +  '10' )",
		"s1": "select CONCAT( -? + ? )",
		"s2": "select CONCAT(?+?)",
		"s3": "select CONCAT(?+?)",
		"s4": "select CONCAT(?+?)"
	},
	// NOTE: KnownIssue - 8: Operators not removed when extra space precedes the literal (value)
	{
		"q" :"select CONCAT(- '89')",
		//              ^ preserved operator
		"s1": "select CONCAT(- ?)",
		"s2": "select CONCAT(?)",
		"s3": "select CONCAT(?)",
		"s4": "select CONCAT(?)"
	},
	// not modified
	{
		"q": "select * fromt t",
		"s1": "select * fromt t",
		"s2": "select * fromt t",
		"s3": "select * fromt t",
		"s4": "select * fromt t"
	},
	// NULL values replacement
	{
		"q":  "select NULL",
		"s1": "select ?",
		"s2": "select ?",
		"s3": "select ?",
		"s4": "select ?"
	},
	{
		"q":  "select nUlL",
		"s1": "select ?",
		"s2": "select ?",
		"s3": "select ?",
		"s4": "select ?"
	},
	{
		"q":  "SELECT * FROM nulltablenull WHERE null_id IN (NULL  ,2,3, 'NULL' ,5,NulL,null,NULL8,9,10)",
		"s1": "SELECT * FROM nulltablenull WHERE null_id IN (? ,?,?, ? ,?,?,?,NULL8,?,?)",
		"s2": "SELECT * FROM nulltablenull WHERE null_id IN (?,?,?,?,?,?,?,NULL8,?,?)",
		"s3": "SELECT * FROM nulltablenull WHERE null_id IN (?,?,?,...,NULL8,?,?)",
		"s4": "SELECT * FROM nulltablenull WHERE null_id IN (?,?,?,...,NULL8,?,?)"
	},
	{
		"q":  "SELECT * FROM table_NULL WHERE null_id IN (NULL  ,2,3, NULL ,5,6,7,NULL8,9,10)",
		"s1": "SELECT * FROM table_NULL WHERE null_id IN (? ,?,?, ? ,?,?,?,NULL8,?,?)",
		"s2": "SELECT * FROM table_NULL WHERE null_id IN (?,?,?,?,?,?,?,NULL8,?,?)",
		"s3": "SELECT * FROM table_NULL WHERE null_id IN (?,?,?,...,NULL8,?,?)",
		"s4": "SELECT * FROM table_NULL WHERE null_id IN (?,?,?,...,NULL8,?,?)"
	},
	{
		"q":  "create table test.null_digests_2 (null_c1 TEXT, c2 TEXT, c3 TEXT)",
		"s1": "create table test.null_digests_2 (null_c1 TEXT, c2 TEXT, c3 TEXT)",
		"s2": "create table test.null_digests_2 (null_c1 TEXT,c2 TEXT,c3 TEXT)",
		"s3": "create table test.null_digests_2 (null_c1 TEXT,c2 TEXT,c3 TEXT)",
		"s4": "create table test.null_digests_2 (null_c1 TEXT,c2 TEXT,c3 TEXT)"
	},
	// SimpleGroping: Query digest reduction
	{
		"q":  "SELECT * FROM tablename WHERE id IN (1,2,3,4)",
		"s1": "SELECT * FROM tablename WHERE id IN (?,?,?,?)",
		"s2": "SELECT * FROM tablename WHERE id IN (?,?,?,?)",
		"s3": "SELECT * FROM tablename WHERE id IN (?,?,?,?)",
		"s4": "SELECT * FROM tablename WHERE id IN (?,?,?,?)"
	},
	{
		"q":  "SELECT * FROM tablename WHERE id IN (1,2,3,4,5,6,7,8,9,10)",
		"s1": "SELECT * FROM tablename WHERE id IN (?,?,?,?,?,?,?,?,?,?)",
		"s3": "SELECT * FROM tablename WHERE id IN (?,?,?,...)",
		"s4": "SELECT * FROM tablename WHERE id IN (?,?,?,...)"
	},
	// SimpleGroping: Invalid query grouping
	{
		"q":  "SELECT * tablename where id IN (1,2,3,4,5,6,7,8,  AND j in (1,2,3,4,5,6  and k=1",
		"s1": "SELECT * tablename where id IN (?,?,?,?,?,?,?,?, AND j in (?,?,?,?,?,? and k=?",
		"s2": "SELECT * tablename where id IN (?,?,?,?,?,?,?,?,AND j in (?,?,?,?,?,? and k=?",
		"s3": "SELECT * tablename where id IN (?,?,?,...,AND j in (?,?,?,...,? and k=?",
		"s4": "SELECT * tablename where id IN (?,?,?,...,AND j in (?,?,?,...,? and k=?"
        //                                                                   ^ due to pattern breaking, symbol isn't collapsed
	},
	// SimpleGroping: Insert queries with mixed spacing
	{
		"q":  "INSERT INTO db.table(col1) VALUES ('val')",
		"s1": "INSERT INTO db.table(col1) VALUES (?)",
		"s2": "INSERT INTO db.table(col1) VALUES (?)",
		"s3": "INSERT INTO db.table(col1) VALUES (?)",
		"s4": "INSERT INTO db.table(col1) VALUES (?)"
	},
	{
		"q":  "INSERT INTO db.table (col1) VALUES ('val')",
		"s1": "INSERT INTO db.table (col1) VALUES (?)",
		"s2": "INSERT INTO db.table (col1) VALUES (?)",
		"s3": "INSERT INTO db.table (col1) VALUES (?)",
		"s4": "INSERT INTO db.table (col1) VALUES (?)"
	},
	{
		"q":  "INSERT INTO db.table( col1) VALUES ( 'val' )",
		"s1": "INSERT INTO db.table( col1) VALUES ( ? )",
		"s2": "INSERT INTO db.table(col1) VALUES (?)",
		"s3": "INSERT INTO db.table(col1) VALUES (?)",
		"s4": "INSERT INTO db.table(col1) VALUES (?)"
	},
	{
		"q":  "INSERT INTO db.table( col1) VALUES ( 'val' )",
		"s1": "INSERT INTO db.table( col1) VALUES ( ? )",
		"s2": "INSERT INTO db.table(col1) VALUES (?)",
		"s3": "INSERT INTO db.table(col1) VALUES (?)",
		"s4": "INSERT INTO db.table(col1) VALUES (?)"
	},
	{
		"q":  "INSERT INTO db.table  ( col1 )  VALUES ( 'val' )",
		"s1": "INSERT INTO db.table ( col1 ) VALUES ( ? )",
		"s2": "INSERT INTO db.table (col1) VALUES (?)",
		"s3": "INSERT INTO db.table (col1) VALUES (?)",
		"s4": "INSERT INTO db.table (col1) VALUES (?)"
	},
	{
		"q":  "INSERT INTO db.table (col1, col2,col3,col4) VALUES ('val',2,3,'foo')",
		"s1": "INSERT INTO db.table (col1, col2,col3,col4) VALUES (?,?,?,?)",
		"s2": "INSERT INTO db.table (col1,col2,col3,col4) VALUES (?,?,?,?)",
		"s3": "INSERT INTO db.table (col1,col2,col3,col4) VALUES (?,?,?,?)",
		"s4": "INSERT INTO db.table (col1,col2,col3,col4) VALUES (?,?,?,?)"
	},
	{
		"q":  "INSERT INTO db.table ( col1, col2,col3,col4 ) VALUES ('val',2,3,'foo')",
		"s1": "INSERT INTO db.table ( col1, col2,col3,col4 ) VALUES (?,?,?,?)",
		"s2": "INSERT INTO db.table (col1,col2,col3,col4) VALUES (?,?,?,?)",
		"s3": "INSERT INTO db.table (col1,col2,col3,col4) VALUES (?,?,?,?)",
		"s4": "INSERT INTO db.table (col1,col2,col3,col4) VALUES (?,?,?,?)"
	},
	{
		"q":  "INSERT INTO db.table_25 (col1, col2,col3,col4) VALUES ('val',2,3,'foo')",
		"s1": "INSERT INTO db.table_25 (col1, col2,col3,col4) VALUES (?,?,?,?)",
		"s2": "INSERT INTO db.table_25 (col1,col2,col3,col4) VALUES (?,?,?,?)",
		"dr": "INSERT INTO db.table_? (col?,col?,col?,col?) VALUES (?,?,?,?)",
		"s3": "INSERT INTO db.table_25 (col1,col2,col3,col4) VALUES (?,?,?,?)",
		"s4": "INSERT INTO db.table_25 (col1,col2,col3,col4) VALUES (?,?,?,?)"
	},
	{
		"q":  "INSERT INTO db.table1_25 ( col_121,col2121  ,col12_3, col41203_   ) VALUES ( 'val', -2, 3, 'foo' )",
		"s1": "INSERT INTO db.table1_25 ( col_121,col2121 ,col12_3, col41203_ ) VALUES ( ?, -?, ?, ? )",
		"s2": "INSERT INTO db.table1_25 (col_121,col2121,col12_3,col41203_) VALUES (?,?,?,?)",
		"dr": "INSERT INTO db.table?_? (col_?,col?,col?_?,col?_) VALUES (?,?,?,?)",
		"s3": "INSERT INTO db.table1_25 (col_121,col2121,col12_3,col41203_) VALUES (?,?,?,?)",
		"s4": "INSERT INTO db.table1_25 (col_121,col2121,col12_3,col41203_) VALUES (?,?,?,?)"
	},
	// SimpleGrouping: Insert queries with operators breaking grouping sequence
	{
		"q":  "INSERT INTO db.table ( col1, col2,col3,col4, col5 ) VALUES ('val',2,3,'foo', 5 + 10, 6 - 9)",
		"s1": "INSERT INTO db.table ( col1, col2,col3,col4, col5 ) VALUES (?,?,?,?, ? + ?, ? - ?)",
		"s2": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,?,?+?,?-?)",
		"dr": "INSERT INTO db.table (col?,col?,col?,col?,col?) VALUES (?,?,?,?,?+?,?-?)",
		"s3": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,?,?+?,?-?)",
		"s4": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,?,?+?,?-?)"
		//                                                                      ^ not collapsed due to pattern breaking
	},
	{
		"q":  "INSERT INTO db.table ( col1, col2,col3,col4, col5 ) VALUES ('val',1, 2,3,'foo', 5 + 10, 6 - 9)",
		"s1": "INSERT INTO db.table ( col1, col2,col3,col4, col5 ) VALUES (?,?, ?,?,?, ? + ?, ? - ?)",
		"s2": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,?,?,?+?,?-?)",
		"s3": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,...,?+?,?-?)",
		"s4": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,...,?+?,?-?)"
		//                                                                        ^ not collapsed due to pattern breaking
	},
	{
		"q":  "INSERT INTO db.table ( col1, col2,col3,col4, col5 ) VALUES ('val',1, 2,3,'foo', 5 + 10, 6 - 9, 12, 3, 4, 5, 4,5,6)",
		"s1": "INSERT INTO db.table ( col1, col2,col3,col4, col5 ) VALUES (?,?, ?,?,?, ? + ?, ? - ?, ?, ?, ?, ?, ?,?,?)",
		"s2": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,?,?,?+?,?-?,?,?,?,?,?,?,?)",
		"s3": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,...,?+?,?-?,?,?,?,...)",
		"dr": "INSERT INTO db.table (col?,col?,col?,col?,col?) VALUES (?,?,?,...,?+?,?-?,?,?,?,...)"
		//                                                                        ^ not collapsed due to pattern breaking
	},
	{
		"q":  "INSERT INTO db.table ( col1, col2,col3,col4, col5 ) VALUES ('val',1, 2,3,'foo'), ('val2', 2,3,4,'foo2')",
		"s1": "INSERT INTO db.table ( col1, col2,col3,col4, col5 ) VALUES (?,?, ?,?,?), (?, ?,?,?,?)",
		"s2": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,?,?),(?,?,?,?,?)",
		"s3": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,...),(?,?,?,...)",
		"s4": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,?,?,...),..."
	},
	{
		"q": [
			"INSERT INTO db.table (col1,col2,col3) VALUES (NULL, NULL, NULL, NULL)",
			"INSERT INTO db.table (col1,col2,col3) VALUES ('foooo', 'bar', 'fooo')",
			"INSERT INTO db.table (col1,col2,col3) VALUES (1.23234, 9.923, 8)"
		],
		"mz": {
			"digest_max_size": 55,
			"grouping_limit": 1,
			"groups_grouping_limit": 1,
			"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...)"
		}
	},
	{
		"q": [
			"INSERT INTO db.table (col1,col2,col3) VALUES (NULL, NULL, NULL, NULL)"
		],
		"mz": {
			"digest_max_size": 55,
			"grouping_limit": 1,
			"groups_grouping_limit": 1,
			"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...)"
		}
	},
	{
		// Testing the compression limits of number parsing when buffer is exceeded.
		"q": [
			"INSERT INTO db.table (col1,col2,col3) VALUES (1.23234, 9.92381, 8.00)"
		],
		"mz": [
			{
				"digest_max_size": 57,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...)"
			},
			{
				"digest_max_size": 57,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...)"
			},
			{
				"digest_max_size": 56,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...)"
			},
			{
				"digest_max_size": 55,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,?"
			},
			{
				"digest_max_size": 54,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,?"
			},
			{
				"digest_max_size": 54,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"replace_digits": 1,
				"digest": "INSERT INTO db.table (col?,col?,col?) VALUES (?,?"
			},
			{
				"digest_max_size": 53,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"replace_digits": 1,
				"digest": "INSERT INTO db.table (col?,col?,col?) VALUES (?"
			},
			{
				"digest_max_size": 47,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"replace_digits": 1,
				"digest": "INSERT INTO db.table (col?,col?,col?) VALUES (?"
			},
			{
				"digest_max_size": 46,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"replace_digits": 1,
				"digest": "INSERT INTO db.table (col?,col?,col?) VALUES ("
			}
		]
	},
	{
		// Testing the compression limits of number parsing when buffer is exceeded.
		// NOTE: This is an example of a query that requires the '...' comprobation in the
		// fourth stage parsing, since it's possible to find results like:
		//    - (?,...),...(?,...)
		//                 ^ remove any founds patterns like this
		// Resulting from stage 3.
		"q": [
			"INSERT INTO db.table ( col1, col2,col3,col4, col5 ) VALUES ('val',1, 2,3,'foo'), ('val2',3,NULL,4,'foo2'), ('val2', 5,0x0239192,4,'foo2'), ('val2', 7,NULL,4,'foo2')"
		],
		"mz": [
			{
				"digest_max_size": 105,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3,col4,col5) VALUES (?,...),..."
			}
		]
	},
	{
		"q": "INSERT INTO db.table (col1,col2,col3) VALUES (1,2,3),(3,5,6),(7,8,9) ON DUPLICATE KEY UPDATE col1 = VALUES(col2)",
		"mz": [
			{
				"digest_max_size": 105,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...),... ON DUPLICATE KEY UPDATE col1 = VALUES(col2)"
			},
			{
				"digest_max_size": 99,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...),... ON DUPLICATE KEY UPDATE col1 = VALUES(col2"
			}
		]
	},
	{
		"q": "INSERT INTO db.table (col1,col2,col3) VALUES (1,2,3),(3,5,6),(7,8,9) ON DUPLICATE KEY UPDATE col1 = VALUES(col2)",
		"mz": [
			{
				"digest_max_size": 105,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...),... ON DUPLICATE KEY UPDATE col1 = VALUES(col2)"
			},
			{
				"digest_max_size": 99,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...),... ON DUPLICATE KEY UPDATE col1 = VALUES(col2"
			}
		]
	},
	{
		"q": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...),(1.23912939495912302020321, 2.23891282384852012203102301203120320031102, 20340122) ON DUPLICATE KEY UPDATE col1 = VALUES(col2)",
		"mz": [
			{
				"digest_max_size": 100,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...),... ON DUPLICATE KEY UPDATE col1 = VALUES(col2)"
			},
			{
				"digest_max_size": 98,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...),(?,?"
				//                                                                 ^ expected, no room for parsing the whole digit
			}
		]
	},
	{
		// Due to the difference in behavior of how numbers vs strings are parsed, it's expected that query is early trimmed
		// when there is no more room for parsing, this is not the case of string parsing.
		"q": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...),('1.23912939495912302020321', '2.23891282384852012203102301203120320031102', '20340122') ON DUPLICATE KEY UPDATE col1 = VALUES(col2)",
		"mz": [
			{
				"digest_max_size": 100,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...),... ON DUPLICATE KEY UPDATE col1 = VALUES(col2)"
			},
			{
				"digest_max_size": 98,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "INSERT INTO db.table (col1,col2,col3) VALUES (?,...),... ON DUPLICATE KEY UPDATE col1 = VALUES(col"
				//                                       expected proper parsing ^                  expected: query trimmed  ^
			}
		]
	},
	{
		"q": "create /* foo_comment*/table table_10_utf8_4 (\n`pk` int primary key,\n`col_bigint_undef_signed` bigint ,\n`col_bigint_undef_unsigned` bigint unsigned ,\n`col_bigint_key_signed` bigint ,\n`col_bigint_key_unsigned` bigint unsigned ,\n`col_float_undef_signed` float ,\n`col_float_undef_unsigned` float unsigned ,\n`col_float_key_signed` float ,\n`col_float_key_unsigned` float unsigned ,\n`col_double_undef_signed` double ,\n`col_double_undef_unsigned` double unsigned ,\n`col_double_key_signed` double ,\n`col_double_key_unsigned` double unsigned ,\n`col_decimal(40, 20)_undef_signed` decimal(40, 20) ,\n`col_decimal(40, 20)_undef_unsigned` decimal(40, 20) unsigned ,\n`col_decimal(40, 20)_key_signed` decimal(40, 20)  ,\n`col_decimal(40, 20)_key_unsigned` decimal(40, 20) unsigned ,\n`col_char(20)_undef_signed` char(20)  ,\n`col_char(20)_key_signed` char(20) ,\n`col_varchar(20)_undef_signed` varchar(20)  ,\n`col_varchar(20)_key_signed` varchar(20) ,\n`col_enum_undef_signed` enum('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z') ,\n`col_enum_key_signed` enum('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z') ,\nkey (`col_bigint_key_signed`),\nkey (`col_bigint_key_unsigned`),\nkey (`col_float_key_signed`),\nkey (`col_float_key_unsigned`),\nkey (`col_double_key_signed`),\nkey (`col_double_key_unsigned`),\nkey (`col_decimal(40, 20)_key_signed`),\nkey (`col_decimal(40, 20)_key_unsigned`),\nkey (`col_char(20)_key_signed`),\nkey (`col_varchar(20)_key_signed`),\nkey (`col_enum_key_signed`)\n) character set utf8 \npartition by hash(pk)\npartitions 4",
		"mz": [
			{
				"digest_max_size": 2048,
				"grouping_limit": 0,
				"groups_grouping_limit": 0,
				"digest": "create table table_10_utf8_4 (`pk` int primary key,`col_bigint_undef_signed` bigint,`col_bigint_undef_unsigned` bigint unsigned,`col_bigint_key_signed` bigint,`col_bigint_key_unsigned` bigint unsigned,`col_float_undef_signed` float,`col_float_undef_unsigned` float unsigned,`col_float_key_signed` float,`col_float_key_unsigned` float unsigned,`col_double_undef_signed` double,`col_double_undef_unsigned` double unsigned,`col_double_key_signed` double,`col_double_key_unsigned` double unsigned,`col_decimal(?,?)_undef_signed` decimal(?,?),`col_decimal(?,?)_undef_unsigned` decimal(?,?) unsigned,`col_decimal(?,?)_key_signed` decimal(?,?),`col_decimal(?,?)_key_unsigned` decimal(?,?) unsigned,`col_char(?)_undef_signed` char(?),`col_char(?)_key_signed` char(?),`col_varchar(?)_undef_signed` varchar(?),`col_varchar(?)_key_signed` varchar(?),`col_enum_undef_signed` enum(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?),`col_enum_key_signed` enum(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?),key (`col_bigint_key_signed`),key (`col_bigint_key_unsigned`),key (`col_float_key_signed`),key (`col_float_key_unsigned`),key (`col_double_key_signed`),key (`col_double_key_unsigned`),key (`col_decimal(?,?)_key_signed`),key (`col_decimal(?,?)_key_unsigned`),key (`col_char(?)_key_signed`),key (`col_varchar(?)_key_signed`),key (`col_enum_key_signed`)) character set utf8 partition by hash(pk) partitions ?"
			},
			{
				"digest_max_size": 2048,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"digest": "create table table_10_utf8_4 (`pk` int primary key,`col_bigint_undef_signed` bigint,`col_bigint_undef_unsigned` bigint unsigned,`col_bigint_key_signed` bigint,`col_bigint_key_unsigned` bigint unsigned,`col_float_undef_signed` float,`col_float_undef_unsigned` float unsigned,`col_float_key_signed` float,`col_float_key_unsigned` float unsigned,`col_double_undef_signed` double,`col_double_undef_unsigned` double unsigned,`col_double_key_signed` double,`col_double_key_unsigned` double unsigned,`col_decimal(?,?)_undef_signed` decimal(?,?),`col_decimal(?,?)_undef_unsigned` decimal(?,?) unsigned,`col_decimal(?,?)_key_signed` decimal(?,?),`col_decimal(?,?)_key_unsigned` decimal(?,?) unsigned,`col_char(?)_undef_signed` char(?),`col_char(?)_key_signed` char(?),`col_varchar(?)_undef_signed` varchar(?),`col_varchar(?)_key_signed` varchar(?),`col_enum_undef_signed` enum(?,...),`col_enum_key_signed` enum(?,...),key (`col_bigint_key_signed`),key (`col_bigint_key_unsigned`),key (`col_float_key_signed`),key (`col_float_key_unsigned`),key (`col_double_key_signed`),key (`col_double_key_unsigned`),key (`col_decimal(?,?)_key_signed`),key (`col_decimal(?,?)_key_unsigned`),key (`col_char(?)_key_signed`),key (`col_varchar(?)_key_signed`),key (`col_enum_key_signed`)) character set utf8 partition by hash(pk) partitions ?"
			},
			{
				"digest_max_size": 2048,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"replace_digits": 1,
				"digest": "create table table_?_utf?_? (`pk` int primary key,`col_bigint_undef_signed` bigint,`col_bigint_undef_unsigned` bigint unsigned,`col_bigint_key_signed` bigint,`col_bigint_key_unsigned` bigint unsigned,`col_float_undef_signed` float,`col_float_undef_unsigned` float unsigned,`col_float_key_signed` float,`col_float_key_unsigned` float unsigned,`col_double_undef_signed` double,`col_double_undef_unsigned` double unsigned,`col_double_key_signed` double,`col_double_key_unsigned` double unsigned,`col_decimal(?,?)_undef_signed` decimal(?,?),`col_decimal(?,?)_undef_unsigned` decimal(?,?) unsigned,`col_decimal(?,?)_key_signed` decimal(?,?),`col_decimal(?,?)_key_unsigned` decimal(?,?) unsigned,`col_char(?)_undef_signed` char(?),`col_char(?)_key_signed` char(?),`col_varchar(?)_undef_signed` varchar(?),`col_varchar(?)_key_signed` varchar(?),`col_enum_undef_signed` enum(?,...),`col_enum_key_signed` enum(?,...),key (`col_bigint_key_signed`),key (`col_bigint_key_unsigned`),key (`col_float_key_signed`),key (`col_float_key_unsigned`),key (`col_double_key_signed`),key (`col_double_key_unsigned`),key (`col_decimal(?,?)_key_signed`),key (`col_decimal(?,?)_key_unsigned`),key (`col_char(?)_key_signed`),key (`col_varchar(?)_key_signed`),key (`col_enum_key_signed`)) character set utf? partition by hash(pk) partitions ?"
			}
		]
	},
	{
		"q": "create /* foo_comment*/table table_10_utf8_4 (`pk` int primary key,`col_bigint_undef_signed` bigint ,`col_bigint_undef_unsigned` bigint unsigned ,`col_bigint_key_signed` bigint ,`col_bigint_key_unsigned` bigint unsigned ,`col_float_undef_signed` float ,`col_float_undef_unsigned` float unsigned ,`col_float_key_signed` float ,`col_float_key_unsigned` float unsigned ,`col_double_undef_signed` double ,`col_double_undef_unsigned` double unsigned ,`col_double_key_signed` double ,`col_double_key_unsigned` double unsigned ,`col_decimal(40, 20)_undef_signed` decimal(40, 20) ,`col_decimal(40, 20)_undef_unsigned` decimal(40, 20) unsigned ,`col_decimal(40, 20)_key_signed` decimal(40, 20)  ,`col_decimal(40, 20)_key_unsigned` decimal(40, 20) unsigned ,`col_char(20)_undef_signed` char(20)  ,`col_char(20)_key_signed` char(20) ,`col_varchar(20)_undef_signed` varchar(20)  ,`col_varchar(20)_key_signed` varchar(20) ,`col_enum_undef_signed` enum('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z') ,`col_enum_key_signed` enum('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z') ,key (`col_bigint_key_signed`),key (`col_bigint_key_unsigned`),key (`col_float_key_signed`),key (`col_float_key_unsigned`),key (`col_double_key_signed`),key (`col_double_key_unsigned`),key (`col_decimal(40, 20)_key_signed`),key (`col_decimal(40, 20)_key_unsigned`),key (`col_char(20)_key_signed`),key (`col_varchar(20)_key_signed`),key (`col_enum_key_signed`)) character set utf8 partition by hash(pk) partitions 4",
		"mz": [
			{
				"digest_max_size": 2048,
				"grouping_limit": 1,
				"groups_grouping_limit": 1,
				"replace_digits": 1,
				"digest": "create table table_?_utf?_? (`pk` int primary key,`col_bigint_undef_signed` bigint,`col_bigint_undef_unsigned` bigint unsigned,`col_bigint_key_signed` bigint,`col_bigint_key_unsigned` bigint unsigned,`col_float_undef_signed` float,`col_float_undef_unsigned` float unsigned,`col_float_key_signed` float,`col_float_key_unsigned` float unsigned,`col_double_undef_signed` double,`col_double_undef_unsigned` double unsigned,`col_double_key_signed` double,`col_double_key_unsigned` double unsigned,`col_decimal(?,?)_undef_signed` decimal(?,?),`col_decimal(?,?)_undef_unsigned` decimal(?,?) unsigned,`col_decimal(?,?)_key_signed` decimal(?,?),`col_decimal(?,?)_key_unsigned` decimal(?,?) unsigned,`col_char(?)_undef_signed` char(?),`col_char(?)_key_signed` char(?),`col_varchar(?)_undef_signed` varchar(?),`col_varchar(?)_key_signed` varchar(?),`col_enum_undef_signed` enum(?,...),`col_enum_key_signed` enum(?,...),key (`col_bigint_key_signed`),key (`col_bigint_key_unsigned`),key (`col_float_key_signed`),key (`col_float_key_unsigned`),key (`col_double_key_signed`),key (`col_double_key_unsigned`),key (`col_decimal(?,?)_key_signed`),key (`col_decimal(?,?)_key_unsigned`),key (`col_char(?)_key_signed`),key (`col_varchar(?)_key_signed`),key (`col_enum_key_signed`)) character set utf? partition by hash(pk) partitions ?"
			}
		]
	}
]
